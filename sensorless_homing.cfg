# This configuration file contains variables and macros specific for homing using stallguard rather than 
# physical switches. You will likely need to have DIAG jumpers installed on your mainboard and Klipper configured
# correctly for this to work.
# 
# More information can be found here: https://www.klipper3d.org/TMC_Drivers.html?sensorless-homing
# 
# Be sure to [include] this .cfg file in printer.cfg **BEFORE** you have working SGTHRS/SGT values for
# [tmcXXXX stepper_AXIS] as that will simplify this process. If you already have SGTHRS/SGT
# values in your config, they will likely need adjusting after enabling this configuration.
# 
### Default motor current and homing speed are configured per axis in printer.cfg ###
# 
##################################
## Sensorless Homing Variables:

[gcode_macro _Sensorless_Homing_Variables]
description: Variables for sensorless homing

variable_homing_current: 0.85                # The desired motor current for homing the X and Y axes. Leave as '0.0' to use run_current values instead.
variable_clear_time: 1                      # Time in seconds to wait for StallGuard registers to clear, default is 1 second.
variable_x_backoff_distance: 11             # Distance in mm to back off from the X axis after homing.
variable_y_backoff_distance: 24             # Distance in mm to back off from the Y axis after homing.
variable_z_hop_distance: 10                 # Distance to move the Z axis prior to homing (unless homing Z first).
variable_first_homed_axis: 'X'              # First axis to home when 'G28' is called.

## The following variable is only used if first_homed_axis is 'Z':

variable_second_homed_axis: 'X'             # If the Z axis is homed first, this is the next axis that will be homed when 'G28' is called.

## The following variables are used for moving the printhead to a certain part of the bed before homing the Z axis, unless Z is homed first.

variable_safe_z_enable:True               # Enables/disables moving the printhead to a safe XY position before homing the Z axis.
variable_safe_x: 165                      # Safe X position to home the Z axis, leave at -165 to home to the center of the X axis.
variable_safe_y: 165                      # Safe Y position to home the Z axis, leave at -165 to home to the center of the Y axis.

# Do not modify below
gcode:

[gcode_macro _SET_HOMING_CURRENT]
description: This macro is used to change driver current when homing
gcode:
    {% set kinematics = printer.configfile.config.printer.kinematics | string %}
    {% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}
    {% set homing_current = sensorless_variables.homing_current | float %}
    {% if kinematics == 'corexy' %}
      {% for stepper in printer.configfile.settings if (stepper.startswith('stepper_x') or stepper.startswith('stepper_y')) %}
        SET_TMC_CURRENT STEPPER={stepper} CURRENT={homing_current}
      {% endfor %}
    {% else %}
      {% for stepper in printer.configfile.settings if (stepper.startswith('stepper_x') or stepper.startswith('stepper_y') or stepper.startswith('stepper_z')) %}
        SET_TMC_CURRENT STEPPER={stepper} CURRENT={homing_current}
      {% endfor %}
    {% endif %}

[gcode_macro _SET_RUN_CURRENT]
description: This macro is used to revert driver current back to normal
gcode:
    {% set kinematics = printer.configfile.config.printer.kinematics | string %}
    {% if kinematics == 'corexy' %}
      {% for stepper in printer.configfile.settings if (stepper.startswith('stepper_x') or stepper.startswith('stepper_y')) %}
        {% for driver in printer.configfile.settings if (driver.startswith('tmc') and driver.endswith(stepper)) %}
          {% set default_current = printer.configfile.settings[driver].run_current %}
          SET_TMC_CURRENT STEPPER={stepper} CURRENT={default_current}
        {% endfor %}
      {% endfor %}
    {% else %}
      {% for stepper in printer.configfile.settings if (stepper.startswith('stepper_x') or stepper.startswith('stepper_y') or stepper.startswith('stepper_z')) %}
        {% for driver in printer.configfile.settings if (driver.startswith('tmc') and driver.endswith(stepper)) %}
          {% set default_current = printer.configfile.settings[driver].run_current %}
          SET_TMC_CURRENT STEPPER={stepper} CURRENT={default_current}
        {% endfor %}
      {% endfor %}
    {% endif %}

[gcode_macro _HOME_X]
gcode:

    {% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}
    {% set homing_current = sensorless_variables.homing_current | float %}
    {% set backoff_distance = sensorless_variables.x_backoff_distance | float %}
    {% set clear_time = (sensorless_variables.clear_time * 1000) | float %}
    {% set probe_x_offset = printer.configfile.config.cartographer.x_offset | float %}  # Taking probe X offset from cartographer.cfg

    {% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}
    {% set homing_speed = (printer.configfile.settings['stepper_x'].homing_speed * 60) | float %}

    {% if homing_current != 0.0 %}
      _SET_HOMING_CURRENT
    {% endif %}

    G4 P{clear_time}

    G28 X

    {% if backoff_distance > 0 %}
      {% if positive_dir == True %}
        G91
        G0 X-{backoff_distance} F{homing_speed}
        G90
      {% else %}
        G91
        G0 X{backoff_distance} F{homing_speed}
        G90
      {% endif %}
    {% endif %}

    {% if positive_dir == True %}
      G0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}
    {% else %}
      G0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}
    {% endif %}

    {% if homing_current != 0.0 %}
      _SET_RUN_CURRENT
    {% endif %}

    G4 P{clear_time}

[gcode_macro _HOME_Y]
gcode:

    {% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}
    {% set homing_current = sensorless_variables.homing_current | float %}
    {% set backoff_distance = sensorless_variables.y_backoff_distance | float %}
    {% set clear_time = (sensorless_variables.clear_time * 1000) | float %}
    {% set probe_y_offset = printer.configfile.config.cartographer.y_offset | float %}  # Taking probe Y offset from cartographer.cfg

    {% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}
    {% set homing_speed = (printer.configfile.settings['stepper_y'].homing_speed * 60) | float %}

    {% if homing_current != 0.0 %}
      _SET_HOMING_CURRENT
    {% endif %}

    G4 P{clear_time}

    G28 Y

    {% if backoff_distance > 0 %}
      {% if positive_dir == True %}
        G91
        G0 Y-{backoff_distance} F{homing_speed}
        G90
      {% else %}
        G91
        G0 Y{backoff_distance} F{homing_speed}
        G90
      {% endif %}
    {% endif %}

    {% if positive_dir == True %}
      G0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}
    {% else %}
      G0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}
    {% endif %}

    {% if homing_current != 0.0 %}
      _SET_RUN_CURRENT
    {% endif %}

    G4 P{clear_time}



[gcode_macro _HOME_Z]
gcode:
    {% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}
    {% set first_homed_axis = sensorless_variables.first_homed_axis | string %}
    {% set positive_dir = printer.configfile.settings.stepper_z.homing_positive_dir | abs %}
    {% set z_retract_distance = printer.configfile.settings.stepper_z.homing_retract_dist | float %}
    {% set homing_speed = (printer.configfile.settings['stepper_z'].homing_speed * 60) | float %}

    G28 Z

    {% if positive_dir == True %}
      G91
      G0 Z{-z_retract_distance} F{homing_speed}
      G90
    {% else %}
      G91
      G0 Z{z_retract_distance} F{homing_speed}
      G90
    {% endif %}

[homing_override]
axes: xyz
set_position_z: 0
gcode:

    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
    {% set z_hop_speed = (printer.configfile.settings['stepper_z'].homing_speed * 30) | float %}
    {% set travel_speed = (printer.toolhead.max_velocity * 30) | float %}
    {% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}
    {% set z_hop_distance = sensorless_variables.z_hop_distance | float %}
    {% set first_homed_axis = sensorless_variables.first_homed_axis | string %}
    {% set second_homed_axis = sensorless_variables.second_homed_axis | string %}
    {% set probe_y_offset = printer.configfile.config.cartographer.y_offset | float %}
    {% set probe_x_offset = printer.configfile.config.cartographer.x_offset | float %}
    {% set safe_x = sensorless_variables.safe_x | float %}
    {% set safe_y = sensorless_variables.safe_y | float %}
    {% set safe_z = sensorless_variables.safe_z_enable | abs %}

    {% if safe_x == -165 %}
        {% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}
    {% endif %}

   

    {% if safe_y == -165 %}
        {% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}
    {% endif %}

                 

    {% if z_hop_distance > 0 %}                                                                    
      {% if 'x' not in printer.toolhead.homed_axes and 'y' not in printer.toolhead.homed_axes %}    
        {% if first_homed_axis != 'Z' %}
          G0 Z{z_hop_distance} F{z_hop_speed}                                                       
        {% endif %}
      {% endif %}                                                                                  
    {% endif %}        

  {% if z_hop_distance > 0 %}                                                                     
      {% if 'x' not in printer.toolhead.homed_axes and 'y' not in printer.toolhead.homed_axes %}    
        {% if first_homed_axis != 'Z' %}
          G0 Z{z_hop_distance} F{z_hop_speed}                                                       
        {% endif %}
      {% endif %}                                                                                   
    {% endif %}                                                                                     

    {% if first_homed_axis == 'X' %}                                                                
      {% if home_all or 'X' in params %}                                                           
        _HOME_X                                                                                    
      {% endif %}                                                                                   
      {% if home_all or 'Y' in params %}                                                          
        _HOME_Y                                                                                     
      {% endif %}                                                                                   
    {% endif %}                                                                                     

    {% if first_homed_axis == 'Y' %}                                                              
      {% if home_all or 'Y' in params %}                                                            
        _HOME_Y                                                                                    
      {% endif %}                                                                                   
      {% if home_all or 'X' in params %}                                                         
        _HOME_X                                                                                     
      {% endif %}                                                                                   
    {% endif %}                                                                                     

    {% if first_homed_axis == 'Z' %}
        {% if home_all or 'Z' in params %}
          _HOME_Z
        {% endif %}
        {% if second_homed_axis == 'X' %}
            {% if home_all or 'X' in params %}
                _HOME_X
            {% endif %}
            {% if home_all or 'Y' in params %}
                _HOME_Y
            {% endif %}
        {% endif %}
        {% if second_homed_axis == 'Y' %}
            {% if home_all or 'Y' in params %}
                _HOME_Y
            {% endif %}
            {% if home_all or 'X' in params %}
                _HOME_X
            {% endif %}
        {% endif %}
    {% endif %}

    {% if safe_z == True and (home_all or 'Z' in params) and first_homed_axis != 'Z' %}             # If safe_z is true and home_all or 'Z' is in params,
        G0 X{safe_x} Y{safe_y} F{travel_speed}                                                      # Move to the defined safe XY location
    {% endif %}                                                                                     #

    {% if home_all or 'Z' in params %}                                                              #
        {% if first_homed_axis != 'Z'%}
          _HOME_Z
        {% endif %}
    {% endif %}  


    ##{% if home_all or 'X' in params %}
       ##_HOME_X
    ##{% endif %}

    ##{% if home_all or 'Y' in params %}
        ##_HOME_Y
    ##{% endif %}

    #{% if home_all or 'Z' in params %}
        ##_HOME_Z
    ##{% endif %}

    ##{% if safe_z == True and (home_all or 'Z' in params) and first_homed_axis != 'Z' %}
        ##G0 X{safe_x} Y{safe_y} F{travel_speed}
    ##{% endif %}



